package com.project.bank.service;



import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.project.bank.dto.LoanDTO;
import com.project.bank.entity.Account;
import com.project.bank.entity.Loan;
import com.project.bank.repository.AccountRepository;
import com.project.bank.repository.LoanRepository;

@Service
public class LoanService {
	
	 	@Autowired
	    private LoanRepository loanRepository;

	    @Autowired
	    private AccountRepository accountRepository;
	    

	    public void applyLoan(LoanDTO loanDTO) {
	        Loan loan = new Loan();
	        loan.setLoanType(loanDTO.getLoanType());
	        loan.setAmount(loanDTO.getAmount());
	        loan.setTenure(loanDTO.getTenure());
	        loan.setAppliedDate(new Date());
	        loan.setRateOfInterest(loanDTO.getRateOfInterest());
	        loan.setLoanStatus("Pending");

	        Optional<Account> account = accountRepository.findById(loanDTO.getAccountAccNo());
	        loan.setAccount(account.get());

	        loanRepository.save(loan);
	    }
	    
	    public LoanDTO approveOrRejectLoan(int loanId, String status) {
	        
	        Loan loan = loanRepository.findById(loanId)
	                .orElseThrow(() -> new RuntimeException("Loan not found with id: " + loanId));

	       
	        if (!status.equalsIgnoreCase("Approved") && !status.equalsIgnoreCase("Rejected")) {
	            throw new IllegalArgumentException("Invalid status. Status should be either 'Approved' or 'Rejected'.");
	        }

	        loan.setLoanStatus(status);
	        Loan updatedLoan = loanRepository.save(loan);

	     
	        LoanDTO updatedLoanDTO = new LoanDTO();
	        updatedLoanDTO.setLoanId(updatedLoan.getLoanId());
	        updatedLoanDTO.setLoanType(updatedLoan.getLoanType());
	        updatedLoanDTO.setAmount(updatedLoan.getAmount());
	        updatedLoanDTO.setTenure(updatedLoan.getTenure());
	        updatedLoanDTO.setAppliedDate(updatedLoan.getAppliedDate());
	        updatedLoanDTO.setRateOfInterest(updatedLoan.getRateOfInterest());
	        updatedLoanDTO.setLoanStatus(updatedLoan.getLoanStatus());
	        updatedLoanDTO.setAccountAccNo(updatedLoan.getAccount().getAccNo());

	        return updatedLoanDTO;
	    }
	    
	    }
