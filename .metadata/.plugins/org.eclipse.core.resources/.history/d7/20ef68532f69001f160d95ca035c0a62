package com.project.bank.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.project.bank.dto.AccountDisplay;
import com.project.bank.dto.CustomerDisplay;
import com.project.bank.dto.DisplayDetails;
import com.project.bank.dto.LoanDTO;
import com.project.bank.entity.Account;
import com.project.bank.entity.Address;
import com.project.bank.entity.Customer;
import com.project.bank.entity.Transactions;
import com.project.bank.service.AccountService;
import com.project.bank.service.AddressService;
import com.project.bank.service.CustomerService;
import com.project.bank.service.LoanService;
import com.project.bank.service.TransactionsService;

@CrossOrigin(origins= {"http://localhost:4200"})
@RestController
@RequestMapping("api/customers")
public class CustomerController {
	
	@Autowired
	private CustomerService customerService;
	
	@Autowired
	private AddressService addressService;
	
	@Autowired
	private AccountService accountService;
	
	@Autowired
    private TransactionsService transactionsService;
	
	@Autowired
	private LoanService loanService;
	
	@PostMapping("/register")
	public ResponseEntity<String> registerCustomer(@RequestBody Customer customer)
	{
		if(customer.getAddress()==null) {
			return  ResponseEntity.status(HttpStatus.BAD_GATEWAY).body("Address information required");
		}
		
		if(customer.getAccount()==null) {
			return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body("Account details required");
		}
		Customer savedCutomer = customerService.registerCustomer(customer);
		List<Address> address = customer.getAddress();
		for(Address address1: address) {
			address1.setCustomer(savedCutomer);
			addressService.registerAddress(address1);
		}
		savedCutomer.setAddress(address);

		List<Account> account=customer.getAccount();
		for(Account acc:account) {
			acc.setCustomer(savedCutomer);
			acc.setBalance(0.0);
			acc.setDate(new Date());
			acc.setStatus("active");
			accountService.registerAccount(acc);
		}
		savedCutomer.setAccount(account);
		
		Customer registerCustomer=customerService.registerCustomer(customer);
		if(registerCustomer!=null) {
			return ResponseEntity.status(HttpStatus.CREATED).body("Customer opened Successfully");
		}else {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Customer Account failed to open");
		}
		
	}
	
	@PostMapping("/login")
	public ResponseEntity<AccountDisplay> loginCustomer(@RequestBody Map<String,String>loginData){
		String emailId=loginData.get("email");
		String password=loginData.get("password");
		Customer loginCustomer=customerService.loginCustomer(emailId, password);
		AccountDisplay accountDisplay= new AccountDisplay();
		for(Account acc:loginCustomer.getAccount()){
    		accountDisplay.setAccNo(acc.getAccNo());
    		accountDisplay.setAccType(acc.getAccType());
    		accountDisplay.setBalance(acc.getBalance());
    		accountDisplay.setDate(acc.getDate());
    		accountDisplay.setStatus(acc.getStatus());
			
		}
	if(loginCustomer!=null) {
			return ResponseEntity.status(HttpStatus.OK).body(accountDisplay);
		}else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	}
	}
	
	
	@GetMapping("/account/{accNo}")
	public ResponseEntity<AccountDisplay> getAccountByAccountNo(@PathVariable int accNo){
		Account account = accountService.findAccountByAccountNo(accNo);
		AccountDisplay ad=new AccountDisplay();
		ad.setAccNo(account.getAccNo());
		ad.setAccType(account.getAccType());
		ad.setBalance(account.getBalance());
		ad.setStatus(account.getStatus());
		ad.setDate(account.getDate());
		if(account !=null) {
			return ResponseEntity.ok(ad);
		}else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		}
	}
	
	@GetMapping("/allcustomers")
	public ResponseEntity<List<CustomerDisplay>> getAllCustomers(){
	    List<CustomerDisplay> customers = customerService.getAllCustomers();
	    return ResponseEntity.ok(customers);
	}

	
	@GetMapping("/allaccounts")
	public ResponseEntity<List<AccountDisplay>> getAllAccounts(){
		List<AccountDisplay> account = accountService.getAllAccounts();
		return ResponseEntity.ok(account);
	}
	
    @GetMapping("/customer/by-account/{accNo}")
    public ResponseEntity<Customer> getCustomerByAccountNo(@PathVariable("accNo") int accNo) {
        Customer customer = customerService.getCustomerByAccountNo(accNo);
        if (customer != null) {
            return ResponseEntity.ok(customer);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
	
    @GetMapping("/customer/details/by-account/{accNo}")
	public ResponseEntity<DisplayDetails> getCustomerDetailsByAccNo(@PathVariable int accNo){
		Customer customer = customerService.getCustomerDetailsByAccNo(accNo);
		DisplayDetails dd=new DisplayDetails();
				dd.setCustomerId(customer.getCustomerId());
				dd.setCustomerName(customer.getCustomerName());
				dd.setMobielNo(customer.getMobielNo());
				dd.setEmail(customer.getEmail());
		    	for(Address add:customer.getAddress()) {
		    		dd.setAddressId(add.getAddressId());
		    		dd.setCity(add.getCity());
		    		dd.setCountry(add.getCountry());
		    		dd.setHouseNo(add.getHouseNo());
		    		dd.setLocality(add.getLocality());
		    		dd.setPincode(add.getPincode());
		    		dd.setStreetName(add.getStreetName());
		    	}
		    	
		    	for(Account acc:customer.getAccount()) {
		    		dd.setAccNo(acc.getAccNo());
		    		dd.setAccType(acc.getAccType());
		    		dd.setBalance(acc.getBalance());
		    		dd.setDate(acc.getDate());
		    		dd.setStatus(acc.getStatus());
		    	}
		if(dd!=null) {
			return new ResponseEntity<DisplayDetails>(dd,HttpStatus.OK);
		}
		else {
			return new ResponseEntity<DisplayDetails>(dd,HttpStatus.NOT_FOUND);
		}
	}
    
	@PostMapping("/withdraw/{accNo}")
	public ResponseEntity<String> withdraw(@RequestParam double withdraw,@PathVariable int accNo){
		Account account = accountService.findAccountByAccountNo(accNo);
		if(account!=null) {
		if(account.getBalance()>=0 && account.getBalance()>=withdraw) {
		account.setBalance(account.getBalance()-withdraw);
		accountService.registerAccount(account);
		return ResponseEntity.status(HttpStatus.ACCEPTED).body("Amount Withdraw successfull final Balance:"+account.getBalance());
		}
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("WithDraw Failed "+account.getBalance());
		}
		else {
			return ResponseEntity.status(HttpStatus.ACCEPTED).body("Account Not found");
		}
	}
	
	@PostMapping("/deposit/{accNo}")
	public ResponseEntity<String> deposit(@RequestParam double deposit,@PathVariable int accNo){
		Account account = accountService.findAccountByAccountNo(accNo);
		if(account!=null) {
		account.setBalance(account.getBalance()+(double)deposit);
		accountService.registerAccount(account);
		return ResponseEntity.status(HttpStatus.ACCEPTED).body("Amount deposited final Balance:"+account.getBalance());
		}
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Account Not Found");
		}
	

    @PostMapping("/transfer")
    public ResponseEntity<String> transferFunds(
            @RequestParam int sourceAccNo,
            @RequestParam int destAccNo,
            @RequestParam double amount) {
    	try {
        String result = transactionsService.transferFunds(sourceAccNo, destAccNo, amount);
        
            return new ResponseEntity<>(result,HttpStatus.OK);
        } catch (RuntimeException ex){
            return new ResponseEntity<>(ex.getMessage(),HttpStatus.BAD_REQUEST);
        }
    }
    
    @GetMapping("/transactions/{accNo}")
    public ResponseEntity<List<Transactions>> getTransactionsByAccNo(@PathVariable("accNo") int accNo) {
        List<Transactions> transactions = transactionsService.getTransactionsByAccNo(accNo);
        return ResponseEntity.ok(transactions);
    }
    
    @PutMapping("/activate-or-deactivate/{accNo}")
    public ResponseEntity<String>activateOrDeactivateAccount(@PathVariable int accNo,@RequestParam boolean activate){
    	boolean result = accountService.activateOrDeactivateAccount(accNo, activate);
    	if(result) {
    		return ResponseEntity.ok(activate?"Account activate" : "Account deactivated");
    	}else {
    		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Account not found");
    	}
    }
    
    @PostMapping("/apply")
    public ResponseEntity<String> applyLoan(@RequestBody LoanDTO loanDTO) {
        loanService.applyLoan(loanDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body("Loan application submitted successfully");
    }
}