package com.project.bank.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfiguration {

    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // Disable CSRF for simplicity, but in production, consider enabling it
            .authorizeRequests()
            .requestMatchers("/register").permitAll() // Allow everyone to register
            .requestMatchers("/login").permitAll() // Allow everyone to login
            .anyRequest().authenticated() // Any other requests require authentication
            .and()
            .formLogin()
            .loginProcessingUrl("/login") // Custom login processing URL
            .defaultSuccessUrl("/home", true) // Redirect on successful login
            .and()
            .logout()
            .logoutUrl("/logout") // URL to trigger logout
            .logoutSuccessUrl("/login?logout") // Redirect on successful logout
            .and()
            .httpBasic(); // Use basic authentication
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Use BCrypt password encoder
    }
}
